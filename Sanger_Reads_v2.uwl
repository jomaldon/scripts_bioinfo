#@UGENE_WORKFLOW
#The workflow does the following things:
#1) Reads a set of Sanger sequencing reads from ABI files.
#2) Trims ends of the reads by the quality value.
#3) Filter the short trimmed reads.
#
#You can change the workflow parameters:
#1) Quality threshold for the trimming.
#2) Minimum read length. If length of a trimmed read is less than the minimum value than the read is filtered.
#
#The output data are:
#1) Multiple sequence alignment file. The first sequence of the alignment is the reference and other ones are the reads.
#2) Annotated reference sequence file. The annotations are the aligned reads.



workflow "Trim Sanger reads"{

    read-sequence {
        type:read-sequence;
        name:"Read Sequence";
        url-in {
            dataset:Dataset1;
            file:"D:/Jonathan/Desktop/Postdoc2020/macrogen/HC00147751/13_ITS1.ab1";
            file:"D:/Jonathan/Desktop/Postdoc2020/macrogen/HC00147751/13_ITS4.ab1";
            file:"D:/Jonathan/Desktop/Postdoc2020/macrogen/HC00147751/27_ITS1.ab1";
            file:"D:/Jonathan/Desktop/Postdoc2020/macrogen/HC00147751/27_ITS4.ab1";
        }
    }
    write-sequence {
        type:write-sequence;
        name:"Write Sequence FASTQ_trim";
        document-format:fastq;
        url-out:"";
        url-suffix:_trim;
    }
    write-sequence-2 {
        type:write-sequence;
        name:"Write Sequence FASTQ_orig";
        document-format:fastq;
        url-suffix:_orig;
    }
    SequenceQualityTrim {
        type:SequenceQualityTrim;
        name:"Sequence Quality Trimmer";
        qual-id:40;
    }

    .actor-bindings {
        SequenceQualityTrim.out-sequence->write-sequence.in-sequence
        read-sequence.out-sequence->write-sequence-2.in-sequence
        read-sequence.out-sequence->SequenceQualityTrim.in-sequence
    }

    SequenceQualityTrim.sequence->write-sequence.in-sequence.sequence
    read-sequence.annotations->write-sequence-2.in-sequence.annotations
    read-sequence.sequence->write-sequence-2.in-sequence.sequence
    read-sequence.sequence->SequenceQualityTrim.in-sequence.sequence

    .meta {
        parameter-aliases {
            read-sequence.url-in {
                alias:reads;
            }
        }
        visual {
            SequenceQualityTrim {
                pos:"-2668 -2815";
                style:ext;
                bg-color-ext:"0 128 128 64";
                in-sequence.angle:180;
                out-sequence.angle:360;
            }
            read-sequence {
                pos:"-2932 -2797";
                style:ext;
                bg-color-ext:"0 128 128 64";
                bounds:"-30 -30 98 79";
                out-sequence.angle:360;
            }
            write-sequence {
                pos:"-2471 -2818";
                style:ext;
                bg-color-ext:"0 128 128 64";
                bounds:"-30 -30 94 105";
                in-sequence.angle:180;
            }
            write-sequence-2 {
                pos:"-2668 -2672";
                style:ext;
                bg-color-ext:"0 128 128 64";
                in-sequence.angle:180;
            }
            SequenceQualityTrim.out-sequence->write-sequence.in-sequence {
                text-pos:"-45 -37";
            }
            read-sequence.out-sequence->SequenceQualityTrim.in-sequence {
                text-pos:"-27.5 -24";
            }
            read-sequence.out-sequence->write-sequence-2.in-sequence {
                text-pos:"-27.5 -24";
            }
        }
    }
}

